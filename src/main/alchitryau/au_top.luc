module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],
    input mc_available,
    input mc_fresh_water_input,
    input mc_pump_on_input,
    input mc_pump_off_input,
    input mc_waste_water_input,
    output mc_float_low_indicator,
    output mc_float_high_indicator,
    output float_valve_low_output,
    input  float_valve_low_input,
    output float_valve_high_output,
    input  float_valve_high_input,
    output fresh_water_relay[2],
    output waste_water_relay[2],
    output pump_on_off_relay[2], // The power relays
    output polor_relay[2]
   ) {

  sig rst;                  // reset signal

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    button_conditioner mc_fresh_water_input_conditioned;
    button_conditioner mc_waste_water_input_conditioned;

    button_conditioner mc_pump_on_input_conditioned;
    button_conditioner mc_pump_off_input_conditioned;

    button_conditioner float_valve_low_input_conditioned;
    button_conditioner float_valve_high_input_conditioned;

    button_conditioner mc_available_input_conditioned;

    //pipeline waiting_pump_on(#DEPTH(10000));
  }


  always {

    reset_cond.in = ~rst_n;
    rst = reset_cond.out;

    led = 8h00;
    polor_relay = hFF;
    pump_on_off_relay = hFF;
    waste_water_relay = hFF;

    float_valve_low_output = hFF;
    float_valve_high_output = hFF;

    mc_available_input_conditioned.in = mc_available;


    float_valve_low_input_conditioned.in = float_valve_low_input;
    float_valve_high_input_conditioned.in = float_valve_high_input;

    led[0] = float_valve_low_input_conditioned.out;
    led[1] = float_valve_high_input_conditioned.out;

    mc_float_low_indicator = float_valve_low_input_conditioned.out;
    mc_float_high_indicator = float_valve_high_input_conditioned.out;

    mc_fresh_water_input_conditioned.in = mc_fresh_water_input;
    led[2] = mc_fresh_water_input_conditioned.out;

     mc_waste_water_input_conditioned.in = mc_waste_water_input;
     led[3] = mc_waste_water_input_conditioned.out;

    // FRESH WATER SECTION
    if (float_valve_low_input_conditioned.out || (mc_fresh_water_input_conditioned.out && mc_available_input_conditioned.out)) {
      fresh_water_relay = h00;
    } else {
      fresh_water_relay = hFF;
    }
    // /FRESH WATER SECTION


    // WASTE_WATER_SECTION
    if (float_valve_high_input_conditioned.out || (mc_waste_water_input_conditioned.out && mc_available_input_conditioned.out)) {
      waste_water_relay = h00;
    } else {
      waste_water_relay = hFF;
    }
    // /WASTE_WATER_SECTION


    // POLAR VALUE SECTION
    mc_pump_on_input_conditioned.in = mc_pump_on_input;
    led[4] = mc_pump_on_input_conditioned.out;
    polor_relay = ~2x{mc_pump_on_input_conditioned.out && mc_available_input_conditioned.out };

    mc_pump_off_input_conditioned.in = mc_pump_off_input;
    led[5] = mc_pump_off_input_conditioned.out;
    pump_on_off_relay = ~2x{mc_pump_off_input_conditioned.out && mc_available_input_conditioned.out};

    // /POLAR VALUE SECTION
  }
}